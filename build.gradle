plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.13'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'com.google.osdetector' version "1.7.1" // https://github.com/netty/netty/issues/11020
    id 'jacoco' // add jacoco plugin
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        // To use codecov, enable xml.
        // reference link: https://docs.codecov.com/docs/supported-report-formats
        xml.required.set(true)
        csv.required.set(false)

        // path where result is saved
        html.destination file("jacoco/")
    }

    // Ignore classes: Application, DTO, Config, etc
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/ai/roboadvisor/**/**AdvisorApplication*",
                    "org/ai/roboadvisor/**/*Dto*",
                    "org/ai/roboadvisor/**/*dto*",
                    "org/ai/roboadvisor/**/*Request*",
                    "org/ai/roboadvisor/**/*Response*",
                    "org/ai/roboadvisor/**/*entity*",
                    "**/*Config*",
                    "**/*Exception*",
                    "**/*exception*",
            ])
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
            excludes = [
                    "**.*AdvisorApplication*",
                    "**.*Dto*",
                    "**.*dto*",
                    "**.*Request*",
                    "**.*Response*",
                    "**.*entity*",
                    "**.*Config*",
                    "**.*Exception*",
                    "**.*exception*",
            ]
        }
    }
}

group = 'org.ai'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

// To remove plain.jar in build/libs
jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    if (osdetector.classifier == "osx-aarch_64") {
        runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.77.Final:${osdetector.classifier}")
    }

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

    // etc
    implementation 'com.google.code.gson:gson:2.9.0'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // WireMock
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"
    testImplementation "org.assertj:assertj-core:3.24.2"
//    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}
